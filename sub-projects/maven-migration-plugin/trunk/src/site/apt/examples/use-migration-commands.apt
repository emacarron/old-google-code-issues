                                    ------
                                    Intregrate migrate in maven life cycle
                                    ------
                                    The myBatis Team
                                    ------
                                     2010

~~
~~   Copyright 2010 The myBatis Team
~~
~~   Licensed under the Apache License, Version 2.0 (the "License");
~~   you may not use this file except in compliance with the License.
~~   You may obtain a copy of the License at
~~
~~       http://www.apache.org/licenses/LICENSE-2.0
~~
~~   Unless required by applicable law or agreed to in writing, software
~~   distributed under the License is distributed on an "AS IS" BASIS,
~~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~   See the License for the specific language governing permissions and
~~   limitations under the License.
~~

Use migration commands

 Migration plugins aims to help you to administer your database via iBatis Schema Migration, so, i.e,
 you can use this plugin to create new migration scripts and to apply the pending scripts to your database.

 This example shows the common commands to create and administer your database.

 First of all you have to initialize your migration repository:

+---+
mvn migration:init -Dmigration.path=/path/to/repository
+---+

 This command inizializes the standar migration repository into <<</path/to/repository>>> folder.

 After you have to modify and customize your enviroment: edit the file <<</path/to/repository/enviroments/development.properties>>>
 and set the database coordinte.
 So you can apply the first migration to the database:

+---+
mvn migration:up -Dmigration.path=/path/to/repository
+---+

 Now is possible create the new script:

+---+
mvn migration:new -Dmigration.path=/path/to/repository -Dmigration.description=my_second_schema_migration
+---+

 this command creates a new empty sql file into the folder  <<</path/to/repository/scripts>>> like this:

+---+
--// First migration.
-- Migration SQL that makes the change goes here.

--//@UNDO
-- SQL to undo the change goes here.

+---+

 now you can check the current status of your database by executing this the status goal:

+---+
mvn migration:status -Dmigration.path=/path/to/repository

[INFO] Executing  Apache Migration StatusCommand
[INFO] ID             Applied At             Description
[INFO] ================================================================================
[INFO] 20100400000001    2010-04-24 22:51:16    create changelog
[INFO] 20100400000002    2010-04-24 22:51:17    first migration
[INFO] 20100400000003    ...pending...          my second schema migration
[INFO]
+---+

 finaly you can apply the last migration pending script:

+---+
mvn migration:up -Dmigration.path=/path/to/repository

mvn migration:status -Dmigration.path=/path/to/repository

[INFO] Executing  Apache Migration StatusCommand
[INFO] ID             Applied At             Description
[INFO] ================================================================================
[INFO] 20100400000001    2010-04-24 22:51:16    create changelog
[INFO] 20100400000002    2010-04-24 22:51:17    first migration
[INFO] 20100400000003    2010-04-24 23:14:07    my second schema migration
[INFO]
+---+
