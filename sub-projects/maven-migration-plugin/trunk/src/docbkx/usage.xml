<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!--
    version: $Id$
-->
<chapter id="usage">
    <title>Usage</title>

    <section id="usage.intro">
        <title>Introduction</title>
        <para>
            In this chapter some examples will show how to use the Migration Plugin goals:
        </para>
    </section>

    <section id="usage.prereq">
        <title>Generic Plugin configuration information</title>
        <para>
            Before starting, please take a look at the following links to know more how to include and configure Maven
            plugins in the POM project:
            <itemizedlist>
                <listitem><para><ulink url="http://maven.apache.org/guides/mini/guide-configuring-plugins.html">Configuring Plugins</ulink></para></listitem>
                <listitem><para><ulink url="http://maven.apache.org/guides/plugin/guide-java-plugin-development.html">Plugin Development</ulink></para></listitem>
                <listitem><para><ulink url="http://maven.apache.org/guides/introduction/introduction-to-plugin-prefix-mapping.html">Plugin Prefix</ulink></para></listitem>
            </itemizedlist>
        </para>
    </section>

    <section id="usage.pomconf">
        <title><literal>pom.xml</literal> Plugin configuration</title>
        <para>
            To use Migration Maven plugin in your project you have to configure your <literal>pom.xml</literal>
            file like this:
            <programlisting language="xml"><![CDATA[...
<plugins>
    <plugin>
        <groupId>]]><?eval ${project.groupId}?><![CDATA[</groupId>
        <artifactId>]]><?eval ${project.artifactId}?><![CDATA[</artifactId>
        <version>]]><?eval ${project.version}?><![CDATA[</version>
        <configuration>
            <repository> [migration repository path] </repository>
        </configuration>
        <dependencies>
            [ add your jdbc driver depencency ]
        </dependencies>
    </plugin>
  ...
<plugins>]]></programlisting>
        </para>
    </section>

    <section id="usage.status">
        <title>The <literal>migration:status</literal> goal</title>
        <para>
            This goal prints the current migration status of database. A tipical output could be:
            <screen><![CDATA[mvn migrate:status -Dmigration.path=/path/to/migration/repository

  ...

[INFO] Executing  Apache Migration StatusCommand
[INFO] ID             Applied At          Description
[INFO] ================================================================================
[INFO] 20100400000001    ...pending...    create changelog
[INFO] 20100400000002    ...pending...    first migration
[INFO] 20100400000003    ...pending...    second migration
[INFO]
...]]></screen>
        </para>
    </section>

    <section id="usage.check">
        <title>The <literal>migration:check</literal> goal</title>
        <para>
            checks the current status of your database migration and fails if one or more script are pending.
            A typical use of this goal is check the migration status into your maven build life cycle:

            <programlisting language="xml"><![CDATA[<plugin>
    <groupId>]]><?eval ${project.groupId}?><![CDATA[</groupId>
    <artifactId>]]><?eval ${project.artifactId}?><![CDATA[</artifactId>
    <version>]]><?eval ${project.version}?><![CDATA[</version>
    <configuration>
        <repository> [migration repository path] </repository>
    </configuration>
    <executions>
    <execution>
        <id>migration-chack</id>
        <phase>test</phase>
        <goals>
          <goal>check</goal>
        </goals>
      </execution>
    </executions>
    <dependencies>
        <dependency> [your jdbc dependency] </dependency>
    </dependencies>
</plugin>]]></programlisting>

            and then

            <screen><![CDATA[mvn clean test]]></screen>

            this goal fails if migration plugin founds one or more pending script. To <emphasis>skip</emphasis>  the
            migration check set the properties <literal>migration.skip</literal> like this:

            <screen><![CDATA[mvn -Dmigration.skip=true clean test]]></screen>
        </para>
    </section>

    <section id="usage.site.m2">
        <title>Site report for Maven 2 projects</title>
        <para>
            You can configure your <literal>pom.xml</literal> to create a simple report of your database status:

            <programlisting language="xml"><![CDATA[...
<build>
    ...
    <plugins>
        <plugin>
            <groupId>]]><?eval ${project.groupId}?><![CDATA[</groupId>
            <artifactId>]]><?eval ${project.artifactId}?><![CDATA[</artifactId>
            <version>]]><?eval ${project.version}?><![CDATA[</version>
            <configuration>
                <repository> [migration repository path] </repository>
            </configuration>
            <executions>
                <execution>
                    <id>migration-chack</id>
                    <phase>test</phase>
                    <goals>
                        <goal>check</goal>
                    </goals>
                </execution>
            </executions>
            <dependencies>
                <dependency> [your jdbc dependency] </dependency>
            </dependencies>
        </plugin>
        ...
</build>

<reporting>
    <plugins>
        <plugin>
            <groupId>]]><?eval ${project.groupId}?><![CDATA[</groupId>
            <artifactId>]]><?eval ${project.artifactId}?><![CDATA[</artifactId>
            <version>]]><?eval ${project.version}?><![CDATA[</version>
            <configuration>
                <repository> [migration repository path] </repository>
            </configuration>
        </plugin>
    </plugins>
</reporting>]]></programlisting>

            once the plugin is configured, users can invoke:

            <screen><![CDATA[mvn site]]></screen>
        </para>
    </section>


     <section id="usage.site.m3">
        <title>Site report for Maven 3 projects</title>
        <para>
            You can configure your <literal>pom.xml</literal> to create a simple report of your database status:

            <programlisting language="xml"><![CDATA[...
<build>
    ...
    <plugins>
        <plugin>
            <groupId>]]><?eval ${project.groupId}?><![CDATA[</groupId>
            <artifactId>]]><?eval ${project.artifactId}?><![CDATA[</artifactId>
            <version>]]><?eval ${project.version}?><![CDATA[</version>
            <configuration>
                <repository> [migration repository path] </repository>
            </configuration>
            <executions>
                <execution>
                    <id>migration-chack</id>
                    <phase>test</phase>
                    <goals>
                        <goal>check</goal>
                    </goals>
                </execution>
            </executions>
            <dependencies>
                <dependency> [your jdbc dependency] </dependency>
            </dependencies>
        </plugin>
        <plugin>
             <groupId>org.apache.maven.plugins</groupId>
             <artifactId>maven-site-plugin</artifactId>
             <version>3.0-beta-3</version>
             <configuration>
                   <reportPlugins>
                       <plugin>
                           <groupId>]]><?eval ${project.groupId}?><![CDATA[</groupId>
                           <artifactId>]]><?eval ${project.artifactId}?><![CDATA[</artifactId>
                           <version>]]><?eval ${project.version}?><![CDATA[</version>
                           <configuration>
                               <repository> [migration repository path] </repository>
                           </configuration>
                       </plugin>
                   </reportPlugins>
               </configuration>
           </plugin>
    </plugins>
    ...
]]></programlisting>

            once the plugin is configured, users can invoke:

            <screen><![CDATA[mvn site]]></screen>
        </para>
    </section>

</chapter>
