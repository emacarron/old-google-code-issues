<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2010-2011 The myBatis Team

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->


<!--
  version: $Id$
-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd"
  lang="en">

  <properties>
    <title>MyBatis Scala API > Mapping</title>
    <author email="mybatis-dev@googlegroups.com">The MyBatis Team</author>
    <date>$Date$</date>
  </properties>

  <body>
    <section name="Mapping">
      <p>
          <code>org.mybatis.scala.mapping</code> is the main package of the API, this provides all idioms needed to
          declare ResultMaps and Statements.
        </p>
      <subsection name="ResultMap">
        <p>
          To declare a ResultMap, just extend ResultMap[T] and call its mapping methods in its main constructor.</p>
          <source><![CDATA[val personResultMap = new ResultMap[Person] {
    id ( property="id", column="pid" )
    result ( property="name" column="full_name" )
}]]></source>
        <p>
          You can define contructor args, properties, associations, collections, discriminators, ...
          Look at the scaladoc for furter details of ResultMap construction.
        </p>
        <p>
          You can declare your ResultMaps wherever you want, you will reference them later when you declare
          your mapped statements.
        </p>
      </subsection>

      <subsection name="Mapped Statements">
        <p>
          There are four types of Mapped Statements as you know: Select, Insert, Update and Delete. But Select is
          a special case with three subtypes: SelectOne, SelectList and SelectMap.
        </p>
        <p>
          To define/declare a mapped statement you just have to extend one of the Statement types and set the
          desired properties.
        </p>
      </subsection>

      <subsection name="Select">
        <p>
          For example, if you want to select a User by its id:
        </p>
          <source><![CDATA[val findUserById = new SelectOne[Int,User] {
    def xsql = "SELECT * from user WHERE id = #{id}"
}

// this is also valid
val findUserById = new SelectOne[Int,User] {
    def xsql =
        <xsql>
            SELECT *
            FROM user
            WHERE id = #{{id}}"
        </xsql>
}]]></source>
        <p>
          You can also select a list of users filtered by its name
        </p>
          <source><![CDATA[val findUsers = new SelectList[String,User] {
    def xsql =
        <xsql>
            SELECT *
            FROM user
            WHERE name LIKE #{{name}}
        </xsql>
}]]></source>
    </subsection>

      <subsection name="Insert, Update, Delete">
        <p>
          The same applies to these statement types, just extends and define.
        </p>
        <p>
          Example
        </p>
            <source><![CDATA[val insertNewUser = new Insert[User] {
    keyGenerator = JdbcGeneratedKey(null, "id")
    def xsql =
        <xsql>
            INSERT INTO user(name, username, password)
            VALUES (#{{name}}, #{{username}}, #{{password}})
        </xsql>
}]]></source>

        <p>
          All the mapping code is disconnected, so you can put it in a static initializer (scala object)
          or wherever you want.
        </p>
      </subsection>
    </section>
  </body>
</document>
