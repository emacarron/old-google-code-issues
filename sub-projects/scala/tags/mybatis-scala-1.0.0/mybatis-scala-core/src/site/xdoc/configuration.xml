<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2010-2011 The myBatis Team

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->


<!--
  version: $Id$
-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd"
  lang="en">

  <properties>
    <title>MyBatis Scala API > Configuration</title>
    <author email="mybatis-dev@googlegroups.com">The MyBatis Team</author>
    <date>$Date$</date>
  </properties>

  <body>
    <section name="Configuration">
      <p>
          The main responsibility of the <code>org.mybatis.scala.config</code> package is to provide classes to load the
          main configurations like plugins, datasource and transaction services, etc...
        </p>
        <p>
          Because this API is code centric and type safe, you don't need typeAliases. When you need to reference a type 'Type'
          just use T[Type].
        </p>
        <p>
          Your main configuration is specified in a small XML file as usual:
          <a href="http://mybatis.org/dtd/mybatis-3-config.dtd">http://mybatis.org/dtd/mybatis-3-config.dtd</a>
          But you don't need to specify typeAliases nor mappers. Look at the mybatis core users guide for more details.
        </p>
        <p>
          A sample configuration file could be:
        </p>
          <source><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
  <environments default="standalone">
    <environment id="standalone">
      <transactionManager type="JDBC" />
      <dataSource type="POOLED">
        <property name="driver" value="org.postgresql.Driver"/>
        <property name="url" value="jdbc:postgresql://127.0.0.1:5432/mydb"/>
        <property name="username" value="scalauser"/>
        <property name="password" value="test"/>
      </dataSource>
    </environment>
  </environments>
</configuration>
]]></source>
        <p>
          Once you have your configuration file, you can load it with the Configuration class:
          <source><![CDATA[val config = Configuration("mybatis.xml")]]></source>
        </p>
        <p>
          Once you have your main configuration in place, you should add one or more configuration spaces with
          your mappings.</p>
          <source><![CDATA[val config = Configuration("mybatis.xml")
config.addSpace("mynamespace") { space =>
    space += findPeople                             // Adds mapped statement findPeople
    space ++= PersonDAO                             // Adds all mapped statements declared in PersonDAO
    space ++= Seq(deletePerson, updatePerson, ...)  // Adds all specified statements
}]]></source>
        <p>
          Configuration instances should be created only once per application, just like the SqlSessionFactory.
        </p>
        <p>
          All the configuration code is disconnected, so you can put it in a static initializer (scala object)
          or wherever you want.
        </p>
    </section>
  </body>
</document>
