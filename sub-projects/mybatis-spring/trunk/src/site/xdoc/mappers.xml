<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2010-2012 The MyBatis Team

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!--  version: $Id$ -->

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>MyBatis-Spring | Injecting Mappers</title>
    <author email="mybatis-dev@googlegroups.com">The MyBatis Team</author>
  </properties>

  <body>
    <section name="Injecting Mappers">
      <p>
        Rather than code data access objects (DAOs) manually using
        <code>SqlSessionDaoSupport</code> or
        <code>SqlSessionTemplate</code>, Mybatis-Spring provides a proxy
        factory: <code>MapperFactoryBean</code>. This class lets you inject
        data mapper interfaces directly into other beans. When using mappers
        you simply call them as you have always called your DAOs, but you won't
        need to code any DAO implementation because MyBatis-Spring will create a
        proxy for you.
      </p>
      <p>
        With injected mappers your code will have no direct dependencies on
        MyBatis, Spring or MyBatis-Spring. The proxy that
        <code>MapperFactoryBean</code> creates handles opening and closing
        the session as well as translating any exceptions into Spring
        <code>DataAccessException</code>s. In addition, the proxy will start
        a new Spring transaction if required or participate in an existing one if
        it a transaction is active.
      </p>

    <subsection name="MapperFactoryBean">
      <p>
        A data mapper is added to Spring like the following:
      </p>
        <source><![CDATA[<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
  <property name="mapperInterface" value="org.mybatis.spring.sample.mapper.UserMapper" />
  <property name="sqlSessionFactory" ref="sqlSessionFactory" />
</bean>]]></source>
   
      <p>
        <code>MapperFactoryBean</code> creates a proxy class that
        implements <code>UserMapper</code> and injects it into the
        application. Because a proxy is created at runtime, the specified Mapper
        <strong>must</strong> be an interface, not an implementation class.
      </p>

      <p>
        If the UserMapper has a corresponding MyBatis XML mapper file, it will be
        parsed automatically by the <code>MapperFactoryBean</code> if the
        XML file is in the same classpath location as the mapper interface. There
        is no need to specify the mapper in a MyBatis configuration file unless
        the mapper XML files are in a different classpath location. See the
        <code>SqlSessionFactoryBean's</code>
        <code><a href="factorybean.html">configLocation</a></code>
        property for more information.
      </p>

      <p>
        Note that <code>MapperFactoryBean</code> requires either an
        <code>SqlSessionFactory</code> or an <code>SqlSessionTemplate</code>.
        These can be set through the respective <code>sqlSessionFactory</code> and
        <code>sqlSessionTemplate</code> properties, or they can be autowired by Spring.
        If both properties are set, the <code>SqlSessionFactory</code> is ignored.
        Since the <code>SqlSessionTemplate</code> is required to have a session
        factory set, that factory will be used by <code>MapperFactoryBean</code>.
      </p>

      <p>
         You can inject mappers directly on your business/service objects in the
         same way you inject any other Spring bean:
      </p>
         <source><![CDATA[<bean id="fooService" class="org.mybatis.spring.sample.mapper.FooServiceImpl">
  <property name="userMapper" ref="userMapper" />
</bean>]]></source>
 
      <p>
         This bean can be used directly in application logic:
      </p>
         <source><![CDATA[public class FooServiceImpl implements FooService {

  private UserMapper userMapper;

  public void setUserMapper(UserMapper userMapper) {
    this.userMapper = userMapper;
  }

  public User doSomeBusinessStuff(String userId) {
    return this.userMapper.getUser(userId);
  }
}]]></source>
       <p>
         Notice that there are no <code>SqlSession</code> or MyBatis
         references in this code. Nor is there any need to create, open or close
         the session, MyBatis-Spring will take care of that.
       </p>
    </subsection>

    <subsection name="Scanning for mappers" id="scan">
      <p>
        There is no need to register all your mappers in the Spring XML file.
        Instead, you can let MyBatis-Spring scan your classpath for them.
      </p>
      
      <p>
        You can scan for mappers in three different ways:
      </p>
      <ul>
        <li>Using the <code>mybatis</code> namespace and the <code>scan</code> element.</li>
        <li>Using the annotation <code>@EnableMapperScanning</code></li>
        <li>Using a classic Spring xml file and registering the <code>MapperScannerConfigurer</code></li>
      </ul> 

      <h4>&lt;mybatis:scan&gt;</h4>
      
      <p>
        MyBatis-Spring provides a <code>mybatis</code> namespace with a XML element named <code>scan</code>. This
        element will sarch your classpath for Mappers and will register them to Spring as <code>MapperFactoryBeans</code>. 
      </p>
      
      <p>Follows below a sample XML configuration</p>

        <source><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:mybatis="http://www.mybatis.org/schema/mybatis"
  xsi:schemaLocation="
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
  http://www.mybatis.org/schema/mybatis http://www.mybatis.org/schema/mybatis/mybatis-spring.xsd">
 
  <mybatis:scan base-package="org.mybatis.spring.sample.mapper" />

</beans>]]></source>

      <p>
        The <code>base-package</code> attribute lets you set the base package
        for your mapper interface files. You can set more than one package by
        using a semicolon or comma as a separator. Mappers will be searched for
        recursively starting in the specified package(s).
      </p>

      <p>
        Notice that there is no need to specify a <code>SqlSessionFactory</code> or
        <code>SqlSessionTemplate</code> because the <code>&lt;mybatis:scan&gt;</code>
        will create <code>MapperFactoryBean</code>s that can be autowired. But if you are
        using more than one <code>DataSource</code> autowire may not work for you. In this case
        you can use the <code>factory-ref</code> or
        <code>template-ref</code> attributes to set the right bean name to use.
      </p>

      <p>
        <code>&lt;mybatis:scan&gt;</code> supports filtering the mappers
        created by either specifying a marker interface or an annotation. The
        <code>annotation</code> property specifies an annotation to
        search for. The <code>marker-interface</code> attribute specifies a
        parent interface to search for. If both properties are specified, mappers
        are added for interfaces that match <strong>either</strong> criteria.
        By default, these two properties are null, so all interfaces in the given
        base package(s) will be loaded as mappers.
      </p>

      <p>
        Discovered mappers will be named using Spring default naming strategy for
        autodetected components (see section 3.14.4 of the Spring manual).
        That is, if no annotation is found, it will use the uncapitalized non-qualified class
        name of the mapper. But if either a @Component or a JSR-330 @Named annotation is
        found it will get the name from the annotation.
        Notice that you can set the <code>annotation</code> attribute
        to <code>org.springframework.stereotype.Component</code>,
        <code>javax.inject.Named</code> (if you have JSE 6) or to your own annotation
        (that must be itself annotated) so the annotation will work both as a marker
        and as a name provider.
      </p>

      <h4>@EnableMapperScanning</h4>
      
      <p>
        If you are using the Spring Java Configuration (a.k.a @Configuration) you would 
        prefer to use the <code>@EnableMapperScanning</code> rather than the 
        <code>&lt;mybatis:scan&gt;</code>.  
      </p>
      
      <p>The <code>@EnableMapperScanning</code> annotation is used as follows:</p>
   
   <source><![CDATA[@Configuration
@EnableMapperScanning("org.mybatis.spring.sample.mapper")
public class AppConfig {

  @Bean
  public DataSource dataSource() {
      return new EmbeddedDatabaseBuilder()
               .setType(EmbeddedDatabaseType.H2)
               .build();
  }

  @Bean
  public SqlSessionFactory sqlSessionFactory() throws Exception {
      SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();
      sessionFactory.setDataSource(dataSource());
      return sessionFactory.getObject();
  }
}
]]></source>
	
	  <p>The annotation works in the same exact way than <code>&lt;mybatis:scan&gt;</code> we
	  saw in the previous section. It also lets you specify a marker interface or an annotation class
	  through its properties <code>markerInterface</code> and <code>annotationClass</code>. 
	  It also lets you specify an specific <code>SqlSessionFactory</code> or <code>SqlSessionTemplate</code>
	  by using its properties <code>sqlSessionFactory</code> and <code>sqlSessionTemplate</code>.
	  </p>
     
      <h4>MapperScannerConfigurer</h4>
        
      <p>
        The <code>MapperScannerConfigurer</code> is a <code>BeanDefinitionRegistryPostProcessor</code> that
        can be included in a classic xml application context as a normal bean.
        To set up a <code>MapperScannerConfigurer</code> add the following to the Spring configuration:
      </p>
        <source><![CDATA[<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
  <property name="basePackage" value="org.mybatis.spring.sample.mapper" />
</bean>]]></source>

      <p>
        If you need to specify an specific <code>sqlSessionFactory</code> or <code>sqlSessionTemplate</code>
        note that <strong>bean names</strong> are required,
        not bean references, thus the <code>value</code> attribute is used instead of the
        usual <code>ref</code>:
      </p>
      <source><![CDATA[<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />]]></source>
    
      <p>
        <span class="label important">NOTE</span> <code>sqlSessionFactoryBean</code> and 
        <code>sqlSessionTemplateBean</code> properties were the only option available up to MyBatis-Spring 1.0.2 
        but given that the <code>MapperScannerConfigurer</code> runs earlier in the startup 
        process that <code>PropertyPlaceholderConfigurer</code> there were frequent errors. 
        For that purpose that properties have been deprecated and the new properties 
        <code>sqlSessionFactoryBeanName</code> and <code>sqlSessionTemplateBeanName</code> 
        are recommended.
      </p>
      </subsection>
    </section>
  </body>
</document>
