<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!--
    version: $Id$
-->
<chapter id="core">
    <title>The Core components</title>

    <section id="core.introduction">
        <title>Introduction</title>
        <para>
            Core components are contained in the <literal>org.mybatis.guice.*</literal>
            package, providing a set of reusable Google Guice
            <literal>com.google.inject.Provider</literal>s and
            <literal>com.google.inject.Module</literal>s that
            alleviate users the task to create MyBatis objects.
        </para>
        <para>
            Installing the mybatis-guice module it is very easy, just put the
            <literal>mybatis-guice-<?eval ${project.version}?>.jar</literal> and
            dependencies in the classpath!
        </para>
        <para>
            Apache Maven users instead can easily adding the following dependency
            in their POMs :
            <programlisting language="xml"><![CDATA[<dependencies>
    ...
    <dependency>
        <groupId>org.mybatis</groupId>
        <artifactId>mybatis-guice</artifactId>
        <version>]]><?eval ${project.version}?><![CDATA[</version>
    </dependency>
    ...
</dependencies>]]></programlisting>
        </para>
    </section>

    <section id="core.bootstrap">
        <title>MyBatis Bootstrap</title>
        <para>
            MyBatis offers an excellent APIs layer for the Bootstrap
            configuration that makes easy writing custom bootstrap - by default
            MyBatis comes with the XML loader - and integrating 3rd part components.
        </para>
        <para>
            The core component of the Guice approach is represented by the
            <literal>org.mybatis.guice.MyBatisModule.Builder</literal> that's able to
            create the core MyBatis <literal>org.apache.ibatis.session.SqlSessionFactory</literal>,
            <literal>org.apache.ibatis.session.SqlSessionManager</literal> and
            the user defined <emphasis>Mappers</emphasis>.
        </para>
        <para>
            The best way to start is just adding the
            <literal>org.mybatis.guice.MyBatisModule</literal> into the
            <literal>com.google.inject.Injector</literal>
            as shown in the example below and explain details step by step:

            <programlistingco>
                <areaspec>
                    <area id="start.example.datasource" coords="1"/>
                    <area id="start.example.txfactory" coords="4"/>
                    <area id="start.example.properties" coords="10"/>
                    <area id="start.example.module" coords="15"/>
                    <area id="start.example.retrieve" coords="24"/>
                </areaspec>
                <programlisting language="java"><![CDATA[Class<? extends Provider<DataSource>> dataSourceProviderType = [...];
    // org.mybatis.guice.datasource.builtin.UnpooledDataSourceProvider.class by default

Class<? extends TransactionFactory> txFactoryClass = [...];
    // org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory.class by default

Injector injector = Guice.createInjector(
    new Module() {
        public void configure(Binder binder) {
            binder.bindConstant()
                  .annotatedWith(Names.named("mybatis.environment.id"))
                  .to("development");
        }
    }
    new MyBatisModule.Builder()
        .setDataSourceProviderType(dataSourceProviderType)
        .setTransactionFactoryType(txFactoryClass)
        .create(),
    ...
);

SqlSessionFactory sessionFactory = injector.getInstance(SqlSessionFactory.class);
SqlSessionManager sessionManager = injector.getInstance(SqlSessionManager.class);
MyMapper mapper = injector.getInstance(MyMapper.class);]]></programlisting>
                <calloutlist>
                    <callout arearefs="start.example.datasource">
                        <para>This is the provider that has the
                        task to create and provide
                        the <literal>javax.sql.DataSource</literal> managed by
                        MyBatis.</para>
                        <para>There will be a proper section dedicated to
                        the supported <emphasis>DataSource</emphasis> providers</para>
                    </callout>
                    <callout arearefs="start.example.txfactory">
                        <para>This is the one has to serve the MyBatis
                        <literal>org.apache.ibatis.transaction.TransactionFactory</literal>
                        </para>
                    </callout>
                    <callout arearefs="start.example.properties">
                        <para>The <literal>org.apache.ibatis.mapping.Environment</literal>
                        needs to know the <emphasis>environment id</emphasis>.</para>
                    </callout>
                    <callout arearefs="start.example.module">
                        <para>Install the MyBatis Module in the Injector.</para>
                    </callout>
                    <callout arearefs="start.example.retrieve">
                        <para>Retrieve built MyBatis components from the Injector.</para>
                    </callout>
                </calloutlist>
            </programlistingco>

            Let's have a look now at the MyBatis module components and features:
        </para>

        <section id="core.properties">
            <title>MyBatis properties</title>
            <para>
                By design, we choose to reuse the default configuration
                properties provided by Guice to let users feel free to read and
                set them in any way you prefer; we suggest to put it in a
                properties file, maybe filtered and set depending on which
                environment users are building the application.
            </para>
            <para>
                <orderedlist>
                    <listitem>
                        <para>
                            <literal>mybatis.environment.id</literal> (required):
                            the <literal>org.apache.ibatis.mapping.Environment</literal>
                            needs to know the <emphasis>environment id</emphasis>,
                            so users have to take care of setting the <literal>mybatis.environment.id</literal>
                            property as a Guice constant, for example:
                            <programlisting language="java"><![CDATA[binder.bindConstant()
    .annotatedWith(Names.named("mybatis.environment.id"))
    .to("production");]]></programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <literal>mybatis.configuration.lazyLoadingEnabled</literal>
                            (optional): if users need to enable the <emphasis>lazy loading</emphasis>
                            in the MyBatis <literal>org.apache.ibatis.session.Configuration</literal>,
                            then they have to bind the named property <literal>MyBatis.configuration.lazyLoadingEnabled</literal>
                            with the required boolean value.
                        </para>
                        <para>
                            By default, if <literal>mybatis.configuration.lazyLoadingEnabled</literal>
                            is not specified, the property will be ignored and
                            MyBatis will take care about proper default <emphasis>lazy loading</emphasis>
                            initialization.
                            <programlisting language="java"><![CDATA[binder.bindConstant()
    .annotatedWith(Names.named("mybatis.configuration.lazyLoadingEnabled"))
    .to(true);]]></programlisting>
                        </para>
                    </listitem>
                </orderedlist>
            </para>
        </section>

        <section id="core.datasource">
            <title>The DataSource Provider</title>
            <para>
                The <literal>javax.sql.DataSource</literal> Provider is one of
                the two required providers that takes care about building and
                injecting the used <literal>javax.sql.DataSource</literal>.
            </para>
            <para>
                The mybatis-guice framework comes with some providers that
                support the MyBatis-native Data Sources and two other well known
                Data Sources, <emphasis>C3P0</emphasis> and
                <emphasis>Apache Commons DBCP</emphasis>, but users are free to
                implement their own <literal>javax.sql.DataSource</literal>
                Provider and reference it in the <literal>org.mybatis.guice.MyBatisModule</literal>.
            </para>
            <para>
                Please read the following chapter <emphasis>Data Source Providers</emphasis>
                to obtain more informations about natively supported providers.
            </para>
        </section>

        <section id="core.txfactory">
            <title>The Transaction Factory</title>
            <para>
                By default the <literal>MyBatisModule</literal> is created plugging the
                <literal>org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory</literal>, but users aree free
                to plug their preferred <literal>org.apache.ibatis.transaction.TransactionFactory</literal>:

                <programlisting language="java"><![CDATA[Class<? extends org.apache.ibatis.transaction.TransactionFactory> txFactoryType = ...

Module module = new MyBatisModule.Builder().setTransactionFactoryType(txFactoryType).create;]]></programlisting>
            </para>
        </section>

        <section id="core.aliases">
            <title>Configuring aliases</title>
            <para>
                Once users create the <literal>org.mybatis.guice.MyBatisModule.Builder</literal>,
                it's quite easy plugging optional MyBatis components, like
                aliases: here users can define simple aliases, for example
                <literal>Foo</literal> that stands for <literal>com.acme.Foo</literal>,
                or custom aliases, for example <literal>MyFoo</literal> that
                stands for <literal>com.acme.Foo</literal>.
            </para>
            <para>
                We found very useful adding simple aliases because helped us a
                lot to reduce the errors during our development time; just call:
                <programlisting language="java"><![CDATA[MyBatisModule.Builder builder = new MyBatisModule.Builder();
builder.addSimpleAliases(com.acme.Foo.class, com.acme.Bar.class, ...);]]></programlisting>
            </para>
            <para>
                If users prefeer instead using you own custom aliases, just invoke
                <programlisting language="java"><![CDATA[MyBatisModule.Builder builder = new MyBatisModule.Builder();
builder.addAlias("MyFoo", com.acme.Foo.class)
builder.addAlias("MyBar", com.acme.Bar.class);
...]]></programlisting>
            </para>
        </section>

        <section id="core.typehandlers">
            <title>Configuring Type Handlers</title>
            <para>
                Like users can configure aliases, the can do it the same for
                type handlers: given the <literal>com.acme.Foo</literal> type,
                that has to be handled by the type handler
                <literal>com.acme.dao.FooHandler</literal>, just invoke:
                <programlisting language="java"><![CDATA[MyBatisModule.Builder builder = new MyBatisModule.Builder();
builder.addTypeHandler(com.acme.Foo.class, com.acme.dao.FooHandler.class);
builder.addTypeHandler(com.acme.Bar.class, com.acme.dao.BarHandler.class);
...]]></programlisting>
                and let Google Guice creating the handlers instances and bind
                them to be injected to MyBatis components.
            </para>
        </section>

        <section id="core.interceptors">
            <title>Configuring Interceptor Plugins</title>
            <para>
                Users can easily add their preferred <literal>org.apache.ibatis.plugin.Interceptor</literal>
                simply invoking:
                <programlisting language="java"><![CDATA[MyBatisModule.Builder builder = new MyBatisModule.Builder();
builder.addInterceptorsClasses(com.acme.dao.FooInterceptor.class,
    com.acme.dao.BarInterceptor.class,
    ...);]]></programlisting>
                and let Google Guice creating the interceptors instances and
                bind them to be injected to MyBatis components.
            </para>
        </section>

        <section id="core.mappers">
            <title>Configuring Mappers</title>
            <para>
                Users can add the <emphasis>Mappers</emphasis> classes adding
                them to the module:
                <programlisting language="java"><![CDATA[org.mybatis.guice.MyBatisModule .Builder builder = new MyBatisModule.Builder();
builder.addMapperClasses(com.acme.dao.FooMapper.class, com.acme.dao.BarMapper.class, ...);]]></programlisting>
                and let Google Guice creating the mappers instance and bind them to be injected to MyBatis components.
            </para>
        </section>

        <section id="core.objectfactory">
            <title>Configuring the Object Factory</title>
            <para>
                Just simply define your own <literal>org.apache.ibatis.reflection.factory.ObjectFactory</literal>
                and communicate it to the module and let Google Guice create it:
                <programlisting language="java"><![CDATA[org.mybatis.guice.MyBatisModule .Builder builder = new MyBatisModule.Builder();
builder.setObjectFactoryType(com.acme.MyObjectFactory.class);]]></programlisting>
            </para>
        </section>

        <section id="core.chainingmethods">
            <title>Chaining methods</title>
            <para>
                In order to simplify the <literal>org.mybatis.guice.MyBatisModule</literal>
                creation, <literal>MyBatisModule.Builder</literal> methods can be
                chained like in the example below:
                <programlisting language="java"><![CDATA[Class<? extends Provider<DataSource>> dataSourceProviderType = [...];
Class<? extends TransactionFactory> txFactoryType = [...];
Class<? extends ObjectFactory> objectFactory = [...]

Injector injector = Guice.createInjector(new MyBatisModule.Builder()
    .setDataSourceProviderType(dataSourceProviderType)
    .setTransactionFactoryType(txFactoryClass)
    .addSimpleAliases(com.acme.Foo.class)
    .addAlias("MyBar", com.acme.Bar.class)
    .addTypeHandler(com.acme.Foo.class, com.acme.dao.FooHandler.class)
    .addTypeHandler(com.acme.Bar.class, com.acme.dao.BarHandler.class)
    .addInterceptorsClasses(com.acme.dao.FooInterceptor.class,
                            com.acme.dao.BarInterceptor.class)
    .addMapperClasses(com.acme.dao.FooMapper.class, com.acme.dao.BarMapper.class)
    .setObjectFactoryType(objectFactory))
    .create();]]></programlisting>
                <note>
                    <para>
                        Google Guice will take care about injecting, if required, also to components such plugged providers,
                        <literal>TransactionFactory</literal>, <literal>ObjectFactory</literal>, <literal>TypeHandler</literal>s
                        and <literal>Interceptor</literal>s.
                    </para>
                </note>
            </para>
        </section>
    </section>

    <section>
        <title>Requesting Injections</title>
        <para>Once the MyBatis module has been set-up, clients are ready to request
        MyBatis components injections.</para>
        <para>Clients are free to request the injection of the <classname>SqlSessionFactory</classname>:
        <programlisting language="java"><![CDATA[@Singleton
public final class MySqlSessionFactoryClient {

    private final SqlSessionFactory sqlSessionFactory;

    @Inject
    public MySqlSessionFactoryClient(SqlSessionFactory sqlSessionFactory) {
        this.sqlSessionFactory = sqlSessionFactory;
    }

    ...

}]]></programlisting>
        </para>
        <para>Or the powerful <classname>SqlSessionManager</classname>:
        <programlisting language="java"><![CDATA[@Singleton
public final class MySqlSessionManagerClient {

    @Inject
    private SqlSessionManager sqlSessionManager;

    public void setSqlSessionManager(SqlSessionManager sqlSessionManager) {
        this.sqlSessionManager = sqlSessionManager;
    }

    ...

}]]></programlisting>
        </para>
        <para>Or, even better, users can request directly the configured
        Mapper interfaces:
        <programlisting language="java"><![CDATA[@Singleton
public final class MyMappersClient {

    @Inject
    private PeopleMapper peopleMapper;

    @Inject
    private ContactsMapper contactsMapper;

    public void setPeopleMapper(PeopleMapper peopleMapper) {
        this.peopleMapper = peopleMapper;
    }

    public void setContactsMapper(ContactsMapper contactsMapper) {
        this.contactsMapper = contactsMapper;
    }

    ...

}]]></programlisting>
        </para>
    </section>

    <section id="core.multipledatasource">
        <title>Multiple Datasources</title>
        <para>
            It often happens that users need to interact with multiple schemas
            in the same application, that means to have separate MyBatis
            configurations.
        </para>
        <para>
            Fortunately, the Google Guice <literal>com.google.inject.PrivateModule</literal>
            comes to help us in a very simple and smart way, that will shown in
            the following example.
        </para>
        <para>
            Let's take in consideration, to simplify the example, we have only
            two datasources (but the same concept can be extended for an
            arbitrary data sources number) one for the <literal>contacts</literal>
            schema and another one for the <literal>companies</literal> schema.
            So, all it has to do is installing the <literal>org.mybatis.guice.MyBatisModule</literal>
            modules into the Google Guice <literal>com.google.inject.PrivateModule</literal>
            as shown below:
            <programlisting language="java"><![CDATA[Injector injector = Guice.createInjector(
    new PrivateModule() {
        @Override
        protected void configure() {
            install(new MyBatisModule.Builder()
                .setDataSourceProviderType(PooledDataSourceProvider.class)
                .addSimpleAliases(Contact.class)
                .addMapperClasses(ContactMapper.class)
                .create());
            Names.bindProperties(this.binder(),
                getConnectionProperties("contacts"));
            // binds Mappers/DAOs here
            bind(ContactDao.class).to(ContactDaoImpl.class);
            ...

            // exposes Mappers/DAOs here
            expose(ContactDao.class);
            ...
        }
    }, new PrivateModule() {
        @Override
        protected void configure() {
            install(new MyBatisModule.Builder()
                .setDataSourceProviderType(PooledDataSourceProvider.class)
                .create());
            Names.bindProperties(this.binder(),
                getConnectionProperties("trades"));
            // binds Mappers/DAOs here
            bind(CompanyDao.class).to(CompanyDaoImpl.class);
            ...

            // exposes Mappers/DAOs here
            expose(CompanyDao.class);
            ...
        }
    }
);]]></programlisting>
        </para>
        <para>
            The example shows how to use the <literal>org.mybatis.guice.MyBatisModule</literal>
            to create two different MyBatis configurations in the same context.
            Feel free to implement the <literal>getConnectionProperties()</literal>
            method in the way you prefer! It could be, for example:
            <programlisting language="java"><![CDATA[private final static Properties getConnectionProperties(String schema) {
    final Properties myBatisProperties = new Properties();

    myBatisProperties.setProperty("mybatis.environment.id", "test");
    myBatisProperties.setProperty("JDBC.driver",
        "org.apache.derby.jdbc.EmbeddedDriver");
    myBatisProperties.setProperty("JDBC.url",
        "jdbc:mysql://localhost:3306/" + schema);
    myBatisProperties.setProperty("JDBC.username", "mybatis-user");
    myBatisProperties.setProperty("JDBC.password", "changeme");
    myBatisProperties.setProperty("JDBC.autoCommit", "true");

    return myBatisProperties;
}]]></programlisting>
        </para>
    </section>

    <section id="core.xmlbootstrap">
        <title>MyBatis XML Bootstrap</title>
        <para>
            Users that want configure the MyBatis via the XML configuration, without loosing any single feature
            of the <literal>org.mybatis.guice.MyBatisModule</literal>, can create their Injector using the
            <literal>org.mybatis.guice.XMLMyBatisModule</literal>.
        </para>
        <para>
            <literal>XMLMyBatisModule</literal> clients have just to instantiate it specifying
            <orderedlist>
                <listitem><para>the MyBatis XML configuration file, located in the classpath, by default
                the module will look for <literal>mybatis-config.xml</literal> in the root in the classpath;</para></listitem>
                <listitem><para>the optional MyBatis <literal>environmentId</literal>, <literal>development</literal> by default;</para></listitem>
                <listitem><para>the optional <literal>java.util.Properties</literal> to fill placeholders in the MyBatis XML configuration,
                empty by default.</para></listitem>
            </orderedlist>
        </para>
        <para>
            A typical use case could be identified in the following code snippet:
            <programlisting language="java"><![CDATA[Injector injector = Guice.createInjector(
    new XMLMyBatisModule.Builder().create(),
    ...
);]]></programlisting>
            optionally, the <literal>classpath resource</literal> can be specified:
            <programlisting language="java"><![CDATA[Injector injector = Guice.createInjector(
    new XMLMyBatisModule.Builder()
        .setClassPathResource("my/path/to/mybatis-config.xml")
        .create(),
    ...
);]]></programlisting>
            optionally, the <literal>environmentId</literal> can be specified:
            <programlisting language="java"><![CDATA[Injector injector = Guice.createInjector(
    new XMLMyBatisModule.Builder()
        .setClassPathResource("my/path/to/mybatis-config.xml")
        .setEnvironmentId("production")
        .create(),
    ...
);]]></programlisting>
            clients can also specify also the <literal>java.util.Properties</literal> to fill placeholders in the XML configuration:
            <programlisting language="java"><![CDATA[Properties props = new Properties();
props.setProperty("JDBC.username", "mybatis-user");
props.setProperty("JDBC.password", "changeme");

Injector injector = Guice.createInjector(
    new XMLMyBatisModule.Builder()
        .setClassPathResource("my/path/to/mybatis-config.xml")
        .setEnvironmentId("production")
        .addProperties(props)
        .create(),
    ...
);]]></programlisting>
            <note>
                <para>
                    Google Guice will take care about injecting, if required, also to components such
                    <literal>TypeHandler</literal>s and <literal>Interceptor</literal>s.
                </para>
            </note>
        </para>
    </section>

</chapter>
