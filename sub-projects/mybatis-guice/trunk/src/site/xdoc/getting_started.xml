<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2010-2011 The myBatis Team

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!--
  version: $Id$
-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>MyBatis Guice | Getting started</title>
    <author email="mybatis-dev@googlegroups.com">The MyBatis Team</author>
  </properties>

  <body>
    <section name="Getting started">
  <p>
    MyBatis-Guice helps you integrate your MyBatis code seamlessly with
    Google Guice. Using the classes in this library, Google Guice will load
    the necessary MyBatis classes for you. This library also provides
    an easy way to inject MyBatis data mappers and <code>SqlSessions</code>
    into your application beans.
    Finally, MyBatis-Guice will let you demarcate transactions declaratively
    so you won't need to commit/rollback/close them by hand.
  </p>
  </section>

  <section name="Installation">
        <p>
            Installing the mybatis-guice module it is very easy, just put the
            <code>mybatis-guice-X.X.jar</code> and
            dependencies in the classpath!
        </p>
        <p>
            Apache Maven users instead can easily adding the following dependency
            in their POMs :
            <source><![CDATA[<dependencies>
...
  <dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-guice</artifactId>
    <version>X.X</version>
  </dependency>
...
</dependencies>]]></source>
        </p>
  </section>

  <section name="Quick Setup">
    <p>
      To use MyBatis with Guice you need to set up a <code>MyBatisModule</code>,
      with a <code>DataSource</code> at least one data mapper class and
      a transactional bean to be injected with the mapper.
    </p>

    <p>
      To setup a <code>DataSource</code> you can simply use the <code>JdbcHelper</code> (please see the
      related appendix for more informations) module to build the URL needed for your database and provide the
      connection properties:
      <source><![CDATA[Properties myBatisProperties = new Properties();
myBatisProperties.setProperty("mybatis.environment.id", "test");
myBatisProperties.setProperty("JDBC.schema", "mybatis-guice_TEST");
myBatisProperties.setProperty("derby.create", "true");
myBatisProperties.setProperty("JDBC.username", "sa");
myBatisProperties.setProperty("JDBC.password", "");
myBatisProperties.setProperty("JDBC.autoCommit", "false");

Injector injector = Guice.createInjector(
    JdbcHelper.HSQLDB_Embedded,
    new Module() {
        public void configure(Binder binder) {
            Names.bindProperties(binder, myBatisProperties);
        }
    }
);]]></source>
   </p>

   <p>
      Assume you have a data mapper class defined like the following:

      <source><![CDATA[public interface UserMapper {

    @Select("SELECT * FROM user WHERE id = #{userId}")
    User getUser(@Param("userId") String userId);

}]]></source>

      Note that the mapper class specified <i>must</i> be an
      interface, not an actual implementation class. In this example,
      annotations are used to specify the SQL, but a MyBatis mapper XML file
      could also be used.
   </p>

   <p>
      Assume you also have a transactional service bean that uses your mapper:

      <source><![CDATA[public class FooServiceMapperImpl implements FooService {

    @Inject
    private UserMapper userMapper;

    @Transactional
    public User doSomeBusinessStuff(String userId) {
        return this.userMapper.getUser(userId);
    }

}]]></source>
   </p>

   <p>
      Setup a <code>MyBatisModule</code>, add your mapper to it and bind also 
      your transactional service interface <code>FooService</code> to its implementation.
      <source><![CDATA[public interface UserMapper {
...
Injector injector = Guice.createInjector(
    new MyBatisModule() {

        @Override
        protected void initialize() {
            install(JdbcHelper.HSQLDB_Embedded);

            bindDataSourceProviderType(PooledDataSourceProvider.class);
            bindTransactionFactoryType(JdbcTransactionFactory.class);
            addMapperClass(UserMapper.class);

            Names.bindProperties(binder, createTestProperties());
            bind(FooService.class).to(FooServiceMapperImpl.class);
        }

    }
);]]></source>
   </p>

    <p>
       This is all you need, you can now get an instance of your service. It will
       be automatically injected with the MyBatis mapper. With the mapper calling
       MyBatis data methods is only one line of code. Besides, all operations will 
       be transactional, that means that you will not need to commit or rollback 
       any connection. 
      <source><![CDATA[FooService fooService = this.injector.getInstance(FooService.class);
fooService.doSomeBusinessStuff("data");]]></source>
     </p>
  </section>

    </body>

</document>
