<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2010-2011 The myBatis Team

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!--
  version: $Id$
-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>MyBatis Guice | @Transactional</title>
    <author email="mybatis-dev@googlegroups.com">The MyBatis Team</author>
  </properties>

  <body>
    <section name="@Transactional">

    <subsection name="Introduction">
        <p>
            Thanks to the excellent combination between <code>AOP</code>
            and Google Guice, users can drastically reduce the boilerplate
            code into their DAOs.
        </p>
        <p>
            Let's take in consideration the following code snippet, written
            without introducing mybatis-guice:
                <source><![CDATA[package com.acme;

import org.apache.ibatis.session.*;
import org.mybatis.guice.transactional.*;

public final class FooDAO {

    private final SqlSessionManager sessionManager;

    public FooDAO(SqlSessionManager sessionManager) {
        this.sessionManager = sessionManager;
    }

    public void doFooBar() throws MyDaoException {
        // Starts a new SqlSession
        this.sessionManager.startManagedSession(ExecutorType.BATCH,
            TransactionIsolationLevel.READ_UNCOMMITTED);
        try {
            // Retrieve the FooMapper and execute the doFoo() method.
            FooMapper fooMapper = this.sessionManager.getMapper(FooMapper.class);
            fooMapper.doFoo();

            // Retrieve the BarMapper and execute the doBar() method.
            BarMapper barMapper = this.sessionManager.getMapper(BarMapper.class);
            barMapper.doBar();

            // If everything gone fine, commit the open session.
            this.sessionManager.commit();
        } catch (Throwable t) {
            // If something gone wrong, rollback the open session.
            this.sessionManager.rollback();
            // Optionally, throw a proper DAO layer Exception
            throw new MyDaoException("Something went wrong", t);
        } finally {
            // Close the session.
            this.sessionManager.close();
        }
    }

}]]></source>
        </p>
        <p>
            Users can easily note that this is a recursive and redundant code
            pattern that mybatis-guice will help to simplify introducing a
            special <code>AOP</code> interceptor.
        </p>
    </subsection>

    <subsection name="The @Transactional annotation">
        <p>
            Annotating methods with the <code>org.mybatis.guice.transactional.Transactional</code>
            annotation, users can eliminate recursive code patterns.
        </p>
        <p>
            First of all, let's have a look at the injector that will create the
            previous <code>FooDAO</code> instance:
            <source><![CDATA[Class<? extends Provider<DataSource>> dataSourceProviderClass = [...];
Class<? extends Provider<TransactionFactory>> txFactoryProviderClass = [...];

Injector injector = Guice.createInjector(new MyBatisModule() {

        @Override
        protected void initialize() {
            environmentId("test");
            bindDataSourceProviderType(dataSourceProviderType);
            bindTransactionFactoryType(txFactoryClass);
            addMapperClass(FooMapper.class);
            addMapperClass(BarMapper.class);
        }

    }
);

FooDAO fooDAO = injector.getInstance(FooDAO.class);]]></source>
        </p>
        <p>
            Where <code>FooDAO</code> definition is:
            <source><![CDATA[package com.acme;

import javax.inject.*;
import org.apache.ibatis.session.*;
import org.mybatis.guice.transactional.*;

@Singleton
public final class FooDAOImpl {

    @Inject
    private FooMapper fooMapper;

    @Inject
    private BarMapper barMapper;

    // let's assume setters here

    @Transactional(
        executorType = ExecutorType.BATCH,
        isolation = Isolation.READ_UNCOMMITTED,
        rethrowExceptionsAs = MyDaoException.class,
        exceptionMessage = "Something went wrong"
    )
    public void doFooBar() {
        this.fooMapper.doFoo();
        this.barMapper.doBar();
    }

}]]></source>
        </p>
        <p>
            Users can now simply read how the code can be reduced, delegating
            to the interceptor the session management!
        </p>
        <p>
            The <code>org.mybatis.guice.transactional.Transactional</code>
            annotation supports the following parameters:</p>
            <table>
                <caption>org.mybatis.guice.transactional.Transactional properties</caption>
                <thead>
                    <tr>
                        <th>Property</th>
                        <th>Default</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>executorType</td>
                        <td>ExecutorType.SIMPLE</td>
                        <td>the MyBatis executor type</td>
                    </tr>
                    <tr>
                        <td>isolation</td>
                        <td>Isolation.DEFAULT</td>
                        <td>the transaction isolation level.  The default value will
                          cause MyBatis to use the default isolation level from the
                          data source.</td>
                    </tr>
                    <tr>
                        <td>force</td>
                        <td>false</td>
                        <td>Flag to indicate that MyBatis has to force the
                        transaction <code>commit()</code></td>
                    </tr>
                    <tr>
                        <td>rethrowExceptionsAs</td>
                        <td>Exception.class</td>
                        <td>rethrow caught exceptions as new Exception
                        (maybe a proper layer exception)</td>
                    </tr>
                    <tr>
                        <td>exceptionMessage</td>
                        <td>empty string</td>
                        <td>A custom error message when throwing the custom exception;
                        it supports <code>java.util.Formatter</code>
                        place holders, intercepted method arguments will be used
                        as message format arguments.</td>
                    </tr>
                    <tr>
                        <td>rollbackOnly</td>
                        <td>false</td>
                        <td>If true, the transaction will never committed, but rather the rollback will be forced.
                        That configuration is useful for testing purposes.</td>
                    </tr>
                </tbody>
            </table>
        <p>
            When specifying <code>rethrowExceptionsAs</code> parameter,
            it is required that the target exception type has the constructor
            with <code>Throwable</code> single argument; when specifying
            both <code>rethrowExceptionsAs</code> and <code>exceptionMessage</code>
            parameters, it is required that the target exception type has the constructor
            with <code>String, Throwable</code> arguments;
            specifying the <code>exceptionMessage</code> parameter only
            doesn't have any effect.
        </p>
    </subsection>

    <subsection name="Nested transactions">
        <p>
            The <code>org.mybatis.guice.transactional.Transactional</code>
            annotation is nicely handled to support inner transactional methods;
            given the following simple MyBatis clients:
            <source><![CDATA[class ServiceA {

    @Transactional
    public void method() {
        ...
    }

}

class ServiceB {

    @Transactional
    public void method() {
        ...
    }

}]]></source>
        </p>
        <p>
            That in a certain point are involved in another one in the same
            transaction:
            <source><![CDATA[class CompositeService {

    @Inject
    ServiceA serviceA;

    @Inject
    ServiceB serviceB;

    @Transactional
    public void method() {
        ...
        this.serviceA.method();
        ...
        this.serviceB.method();
        ...
    }

}]]></source>
        </p>
        <p>
            In this case, <code>ServiceA#method()</code> and
            <code>ServiceB#method</code> can be invoked as atomic transactions,
            the advantage is when <code>serviceA#method()</code> and
            <code>serviceB#method()</code> will be invoked inside the 
            <code>CompositeService#method</code>, that the interceptor will
            take care to manage them in the same session, even if annotated to
            start a new transaction.
        </p>
    </subsection>

</section>

</body>

</document>
