<?xml version="1.0" encoding="UTF-8"?>
<faqs xmlns="http://maven.apache.org/FML/1.0.1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/FML/1.0.1 http://maven.apache.org/xsd/fml-1.0.1.xsd"
  title="Frequently Asked Questions"
  toplink="false">

  <part id="general">
    <title>General</title>

    <faq id="parameter-markers">
      <question>
        What is the difference between #{...} and ${...}?
      </question>
      <answer>
        <p>MyBatis interprets #{...} as a parameter marker in an SQLprepared statement.  MyBatis
           interprets ${...} as String substitution.  It is important to know the difference
           because parameter markers cannot be used in certain places in SQL statements.
           For example, you cannot use a parameter marker to specify a table name.</p>
        <p>Given the following code:</p>
        <source>
          Map&lt;String, Object&gt; parms = new HashMap&lt;String, Object&gt;();
          parms.put(&quot;table&quot;, &quot;foo&quot;);
          parms.put(&quot;criteria&quot;, 37);
          List&lt;Object&gt; rows = mapper.generalSelect(parms);
        </source>
        <source>
          &lt;select id=&quot;generalSelect&quot; parameterType="map"&gt;
            select * from ${table}
            where col1 = #{criteria}
          &lt;/select&gt;
        </source>
        <p>MyBatis will generate the following prepared statement:</p>
        <source>
            select * from foo
            where col1 = ?
        </source>
      </answer>
    </faq>
    
    <faq id="how-to-like">
      <question>
        How do I code an SQL LIKE?
      </question>
      <answer>
        <p>There are two methods.  In the first (and preferred) method, you append
           the SQL wildcards in your Java code.  For example:</p>

        <source>
          String wildcardName = &quot;%Smi%&quot;;
          List&lt;Name&gt; names = mapper.selectLike(wildcardName);
        </source>
        <source>
          &lt;select id=&quot;selectLike&quot;&gt;
            select * from foo
            where bar like #{value}
          &lt;/select&gt;
        </source>

        <p>Another method is to concatenate the wildcards in your SQL.  This method
           is less safe than the method above because of possible SQL injection.
           For example:</p>

        <source>
          String wildcardName = &quot;Smi&quot;;
          List&lt;Name&gt; names = mapper.selectLike(wildcardName);
        </source>
        <source>
          &lt;select id=&quot;selectLike&quot;&gt;
            select * from foo
            where bar like '%' || '${value}' || '%'
          &lt;/select&gt;
        </source>
        <p><b>Important</b>: Note the use of $ vs. # in the second example!</p>
      </answer>
    </faq>

    <faq id="batch-insert">
      <question>
        How do I code a batch insert?
      </question>
      <answer>
        <p>First, code a simple insert statement like this:</p>
        <source>
          &lt;insert id=&quot;insertName&quot;&gt;
            insert into names (name) values (#{value})
          &lt;/insert&gt;
        </source>
        <p>Then execute a batch in Java code like this:</p>
        <source>
          List&lt;String&gt; names = new ArrayList&lt;String&gt;();
          names.add(&quot;Fred&quot;);
          names.add(&quot;Barney&quot;);
          names.add(&quot;Betty&quot;);
          names.add(&quot;Wilma&quot;);
          
          SqlSession sqlSession = sqlSessionFactory.openSession(ExecutorType.BATCH);
          try {
            NameMapper mapper = sqlSession.getMapper(NameMapper.class);
            for (String name : names) {
              mapper.insertName(name);
            }
            sqlSession.commit();
          } finally {
            sqlSession.close();
          }
        </source>
      </answer>
    </faq>

    <faq id="generated-key">
      <question>
        How can I retrieve the value of an auto generated key?
      </question>
      <answer>
        <p>The insert method <b>always</b> returns an int - which is the number of rows inserted.
           Auto generated key values are placed into the parameter object and are
           available after the completion of the insert method.  For example:</p>
        <source>
          &lt;insert id=&quot;insertName&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;
            insert into names (name) values (#{name})
          &lt;/insert&gt;
        </source>
        <source>
          Name name = new Name();
          name.setName(&quot;Fred&quot;);
          
          int rows = mapper.insertName(name);
          System.out.println(&quot;rows inserted = &quot; + rows);
          System.out.println(&quot;generated key value = &quot; + name.getId());
        </source>
      </answer>
    </faq>
  </part>
</faqs>
